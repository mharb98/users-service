// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                      Int                      @id
  name                    String
  organizationProfiles    OrganizationProfile[]
  organizationInvitations OrganizationInvitation[]

  @@map("organization")
}

model User {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique
  name                String?
  phone               String?
  password            String
  platformBan         Boolean               @default(false) @map("platform_ban")
  verified            Boolean               @default(false)
  confirmed           Boolean               @default(false)
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  internalProfile     InternalProfile?
  organizationProfile OrganizationProfile[]
  SocialProfile       SocialProfile?

  @@map("users")
}

model SocialProfile {
  id        Int      @id() @default(autoincrement())
  banned    Boolean  @default(false)
  gender    Gender?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique @map("user_id")

  @@map("social_profile")
}

model InternalProfile {
  id        Int             @id @default(autoincrement())
  banned    Boolean         @default(false)
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
  roles     InternalRoles[]
  user      User            @relation(fields: [userId], references: [id])
  userId    Int             @unique @map("user_id")

  @@map("internal_profiles")
}

model InternalInvitation {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  role       InternalRole
  acceptedAt DateTime?    @map("accepted_at")
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")

  @@map("internal_invitations")
}

model InternalRoles {
  internalProfile   InternalProfile @relation(fields: [internalProfileId], references: [id])
  internalProfileId Int             @map("internal_profile_id")
  role              InternalRole

  @@id([internalProfileId, role])
  @@map("internal_roles")
}

model OrganizationProfile {
  id             Int              @id @default(autoincrement())
  banned         Boolean          @default(false)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  departments    UserDepartment[]
  user           User             @relation(fields: [userId], references: [id])
  userId         Int              @map("user_id")
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId Int              @unique() @map("organization_id")

  @@map("organization_profiles")
}

model OrganizationInvitation {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  department     Department
  role           DepartmentRole
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId Int            @map("organization_id")
  acceptedAt     DateTime?      @map("accepted_at")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  @@map("organization_invitations")
}

model UserDepartment {
  id                    Int                 @id @default(autoincrement())
  organizationProfile   OrganizationProfile @relation(fields: [organizationProfileId], references: [id])
  organizationProfileId Int                 @map("organization_profile_id")
  department            Department
  role                  DepartmentRole

  @@unique([department, organizationProfileId])
  @@map("user_departments")
}

enum InternalRole {
  Admin
  Moderator
  Member
}

enum Department {
  Administration
  Warehouse
  Finance
  CustomerService
}

enum DepartmentRole {
  Head
  Moderator
  Member
}

enum Gender {
  Male
  Female
}
